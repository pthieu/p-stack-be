version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@8.2.1
  gcp-gcr: circleci/gcp-gcr@0.16.3

variables:
  - &build-image cimg/node:20.2.0
  - &workspace /home/circleci/project
  - &ecr-repo p-stack-be

parameters:
  version-tag:
    type: string
    default: "${CIRCLE_BUILD_NUM}-${CIRCLE_SHA1:0:8}"
    description: |
      The version tag to apply to the image.
  architecture:
    type: string
    default: "linux/aarch64"
    description: |
      The architecture to build the image for.

workflows:
  main:
    jobs:
      - build_workspace:
          filters:
            branches:
              only:
                - main
      - lint_and_compile:
          requires:
            - build_workspace
      # - wait_for_approval:
      #     type: approval
      #     requires:
      #       - lint_and_compile
      # - build_and_push_aws:
      #     context:
      #       - global
      #     repo: *ecr-repo
      #     requires:
      #       - lint_and_compile
      #       # - wait_for_approval
      # - run_migrations:
      #     requires:
      #       - build_and_push_aws
      - build_and_push_gcp:
          context:
            - global
          repo: *ecr-repo
          requires:
            - lint_and_compile
      # - run_migrations:
      #     requires:
      #       - build_and_push_gcp
  feature_branch:
    jobs:
      - build_workspace:
          filters:
            branches:
              ignore:
                - main
      - lint_and_compile:
          requires:
            - build_workspace
      - local_build:
          requires:
            - build_workspace
      - local_db_check:
          requires:
            - build_workspace

jobs:
  build_workspace:
    docker:
      - image: *build-image
    steps:
      - checkout
      - run:
          name: Install pnpm
          command: sudo npm install -g pnpm
      - restore_cache:
          name: Restore pnpm Package Cache
          keys:
            - pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
      - run:
          name: Install Dependencies
          command: pnpm install
      - save_cache:
          name: Save pnpm Package Cache
          key: pnpm-packages-{{ checksum "pnpm-lock.yaml" }}
          paths:
            - node_modules
      - persist_to_workspace:
          root: *workspace
          paths:
            - .
  lint_and_compile:
    docker:
      - image: *build-image
    steps:
      - attach_workspace:
          at: *workspace
      - run:
          name: Lint
          command: pnpm run lint
  run_migrations:
    docker:
      - image: *build-image
        environment:
          NODE_ENV: production
    steps:
      - attach_workspace:
          at: *workspace
      - run:
          name: Run Migrations
          command: pnpm run migrate
      - persist_to_workspace:
          root: *workspace
          paths:
            - .
  local_build:
    docker:
      - image: *build-image
    steps:
      - attach_workspace:
          at: *workspace
      - run:
          name: Codegen GQL files
          command: npm run gql:codegen
      - run:
          name: Build bundle (esbuild)
          command: npm run build
      - persist_to_workspace:
          root: *workspace
          paths:
            - .
  local_db_check:
    docker:
      - image: *build-image
    steps:
      - attach_workspace:
          at: *workspace
      - run:
          name: Check local DB integrity
          command: npm run db:check
      - persist_to_workspace:
          root: *workspace
          paths:
            - .
  build_and_push_aws:
    resource_class: arm.medium
    machine:
      image: ubuntu-2004:current
    executor: aws-ecr/default
    parameters:
      repo:
        type: string
        default: ""
        description: |
          The name of the ECR repo to push an image to.
      region:
        type: string
        default: "us-west-2"
        description: |
          The AWS region to push the image to.
    steps:
      - aws-ecr/build-and-push-image:
          platform: << pipeline.parameters.architecture >>
          registry-id: AWS_ACCOUNT_ID
          region: us-west-2
          repo: << parameters.repo >>
          tag: << pipeline.parameters.version-tag >>,latest
  build_and_push_gcp:
    executor: gcp-gcr/default
    parameters:
      repo:
        type: string
        default: ""
        description: |
          The name of the ECR repo to push an image to.
      region:
        type: string
        default: "us-west1"
        description: |
          The AWS region to push the image to.
    steps:
      - attach_workspace:
          at: *workspace
      - gcp-gcr/gcr-auth
      - gcp-gcr/build-image:
          image: << parameters.repo >>
          registry-url: us.gcr.io
      - gcp-gcr/push-image:
          image: << parameters.repo >>
          registry-url: us.gcr.io
